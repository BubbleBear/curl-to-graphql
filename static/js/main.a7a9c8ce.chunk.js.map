{"version":3,"sources":["formatter/parser.ts","formatter/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["parser","str","s","shellwords","split","args","reduce","a","newArgs","indexOf","push","slice","rewrite","out","method","header","url","state","forEach","arg","isURL","field","parseField","body","btoa","DefaultValue","query","variables","formatJsToJson","js","JSON","stringify","formatStrToGraphql","prettier","format","plugins","parserGraphql","test","App","useState","input","setInput","formatInput","useMemo","inputStr","parsed","jsCodes","parse","replace","formatter","useClippy","setClipbaord","hasError","className","classNames","showError","value","onChange","e","target","map","onClick","beautyFormatInfo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAS,SAACC,GACrB,IAAMC,EAAIC,IAAWC,MAAMH,GAC3B,GAAa,SAATC,EAAE,GACJ,MAAO,GAET,IAAMG,EA0FR,SAAiBA,GACf,OAAOA,EAAKC,QAAO,SAACD,EAAgBE,GAClC,IAAMC,EAAO,YAAOH,GAQpB,OAPI,IAAME,EAAEE,QAAQ,OAClBD,EAAQE,KAAK,MACbF,EAAQE,KAAKH,EAAEI,MAAM,KAErBH,EAAQE,KAAKH,GAGRC,IACN,IArGUI,CAAQV,GACfW,EAAW,CAAEC,OAAQ,MAAOC,OAAQ,GAAIC,IAAK,IAC/CC,EAAQ,GAiFZ,OA/EAZ,EAAKa,SAAQ,SAAUC,GACrB,QAAQ,GACN,KAAKC,EAAMD,GACTN,EAAIG,IAAMG,EACV,MAEF,IAAa,OAARA,GAAwB,iBAARA,EACnBF,EAAQ,aACR,MAEF,IAAa,OAARE,GAAwB,aAARA,EACnBF,EAAQ,SACR,MAEF,IAAa,OAARE,GACK,WAARA,GACQ,iBAARA,GACQ,eAARA,GACQ,kBAARA,EACAF,EAAQ,OACR,MAEF,IAAa,OAARE,GAAwB,WAARA,EACnBF,EAAQ,OACR,MAEF,IAAa,OAARE,GAAwB,WAARA,EACnBN,EAAIC,OAAS,OACb,MAEF,IAAa,OAARK,GAAwB,cAARA,EACnBF,EAAQ,SACR,MAEF,IAAa,OAARE,GAAwB,aAARA,EACnBF,EAAQ,SACR,MAEF,IAAa,iBAARE,EACHN,EAAIE,OAAO,mBACTF,EAAIE,OAAO,oBAAsB,gBACnC,MAEF,MAAOI,EACL,OAAQF,GACN,IAAK,SACH,IAAMI,EAAQC,EAAWH,GACzBN,EAAIE,OAAOM,EAAM,IAAMA,EAAM,GAC7BJ,EAAQ,GACR,MACF,IAAK,aACHJ,EAAIE,OAAO,cAAgBI,EAC3BF,EAAQ,GACR,MACF,IAAK,OACgB,QAAfJ,EAAIC,QAAmC,SAAfD,EAAIC,SAC9BD,EAAIC,OAAS,QACfD,EAAIE,OAAO,gBACTF,EAAIE,OAAO,iBAAmB,oCAChCF,EAAIU,KAAOV,EAAIU,KAAOV,EAAIU,KAAO,IAAMJ,EAAMA,EAC7CF,EAAQ,GACR,MACF,IAAK,OACHJ,EAAIE,OAAJ,cAA8B,SAAWS,KAAKL,GAC9CF,EAAQ,GACR,MACF,IAAK,SACHJ,EAAIC,OAASK,EACbF,EAAQ,GACR,MACF,IAAK,SACHJ,EAAIE,OAAO,cAAgBI,EAC3BF,EAAQ,QAOXJ,GCtFT,IAAMY,EAAe,CACnBC,MAAO,GACPX,OAAQ,GACRY,UAAW,IA6Bb,IAAMC,EAAiB,SAACC,GACtB,IACE,OAAOC,KAAKC,UAAUF,EAAI,KAAM,GAChC,SACA,MAAO,KAILG,EAAqB,SAAC/B,GAC1B,IACE,OAAOgC,IAASC,OAAOjC,EAAK,CAC1BD,OAAQ,UACRmC,QAAS,CAACC,OAEZ,SACA,MAAO,KAILhB,EAAQ,SAAClB,GAAD,MAAe,eAAemC,KAAKnC,IAE3CoB,EAAa,SAACpB,GAAD,OAAeA,EAAEE,MAAM,W,OCP3BkC,MA7Cf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,KAEPC,EAAcC,mBAAQ,kBDG9B,SAAmBC,GACjB,IAAKA,EAAU,OAAOnB,EACtB,IAAIF,EACAR,EACAY,EACAD,EACJ,IACE,IAAMmB,EAAS7C,EAAO4C,GACtBrB,EAAOsB,EAAOtB,MAAQ,GACtBR,EAAS8B,EAAO9B,QAAU,GAC1B,IAAM+B,EAAUhB,KAAKiB,MACnBxB,EAAKyB,QAAQ,MAAO,IAAIA,QAAQ,YAAa,KAE/CrB,EAAYmB,EAAQnB,UACpBD,EAAQoB,EAAQpB,MAChB,SACA,OAAOD,EAGT,MAAO,CACLC,MAAOM,EAAmBN,GAC1BX,OAAQa,EAAeb,GACvBY,UAAWC,EAAeD,ICzBMsB,CAAUT,KAAQ,CAACA,IAFxC,EAGYU,MAAhBC,EAHI,oBAIPC,EAAWT,mBACf,kBACEH,IACCE,EAAYf,YACZe,EAAYhB,QACZgB,EAAY3B,SACf,CAACyB,EAAOE,IAEV,OACE,qBAAKW,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,0BAEEA,UAAWC,IAAW,OAAQ,CAAEC,UAAWH,IAC3CI,MAAOhB,EACPiB,SAAU,SAACC,GAAD,OAAOjB,EAASiB,EAAEC,OAAOH,UAEpC,CAACd,EAAYhB,MAAOgB,EAAY3B,OAAQ2B,EAAYf,WAAWiC,KAC9D,SAACJ,GAAD,OACE,sBAAKH,UAAU,OAAf,UACE,0BAAUA,UAAU,cAAcG,MAAOA,IACxCA,GACC,wBAAQH,UAAU,UAAUQ,QAAS,kBAAMV,EAAaK,IAAxD,wBAOR,sBAAKH,UAAU,aAAf,UACE,wBAAQQ,QAAS,kBAAMV,EDoBR,SAACT,GAAD,oCAEvBA,EAAYhB,MAFW,mCAKvBgB,EAAYf,UALW,iCAQvBe,EAAY3B,OARW,MCpBqB+C,CAAiBpB,KAArD,2BAGA,wBAAQmB,QAAS,kBAAMpB,EAAS,KAAhC,mBACCW,GAAY,sDC9BRW,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a7a9c8ce.chunk.js","sourcesContent":["import shellwords from \"shellwords-ts\";\nimport { isURL, parseField } from \"./index\";\n\nexport const parser = (str: string): { header?: Record<string, string>; body?: string } => {\n  const s = shellwords.split(str);\n  if (s[0] !== \"curl\") {\n    return {};\n  }\n  const args = rewrite(s);\n  const out: any = { method: \"GET\", header: {}, url: \"\" };\n  let state = \"\";\n\n  args.forEach(function (arg: string) {\n    switch (true) {\n      case isURL(arg):\n        out.url = arg;\n        break;\n\n      case arg === \"-A\" || arg === \"--user-agent\":\n        state = \"user-agent\";\n        break;\n\n      case arg === \"-H\" || arg === \"--header\":\n        state = \"header\";\n        break;\n\n      case arg === \"-d\" ||\n        arg === \"--data\" ||\n        arg === \"--data-ascii\" ||\n        arg === \"--data-raw\" ||\n        arg === \"--data-binary\":\n        state = \"data\";\n        break;\n\n      case arg === \"-u\" || arg === \"--user\":\n        state = \"user\";\n        break;\n\n      case arg === \"-I\" || arg === \"--head\":\n        out.method = \"HEAD\";\n        break;\n\n      case arg === \"-X\" || arg === \"--request\":\n        state = \"method\";\n        break;\n\n      case arg === \"-b\" || arg === \"--cookie\":\n        state = \"cookie\";\n        break;\n\n      case arg === \"--compressed\":\n        out.header[\"Accept-Encoding\"] =\n          out.header[\"Accept-Encoding\"] || \"deflate, gzip\";\n        break;\n\n      case !!arg:\n        switch (state) {\n          case \"header\":\n            const field = parseField(arg);\n            out.header[field[0]] = field[1];\n            state = \"\";\n            break;\n          case \"user-agent\":\n            out.header[\"User-Agent\"] = arg;\n            state = \"\";\n            break;\n          case \"data\":\n            if (out.method === \"GET\" || out.method === \"HEAD\")\n              out.method = \"POST\";\n            out.header[\"Content-Type\"] =\n              out.header[\"Content-Type\"] || \"application/x-www-form-urlencoded\";\n            out.body = out.body ? out.body + \"&\" + arg : arg;\n            state = \"\";\n            break;\n          case \"user\":\n            out.header[\"Authorization\"] = \"Basic \" + btoa(arg);\n            state = \"\";\n            break;\n          case \"method\":\n            out.method = arg;\n            state = \"\";\n            break;\n          case \"cookie\":\n            out.header[\"Set-Cookie\"] = arg;\n            state = \"\";\n            break;\n        }\n        break;\n    }\n  });\n\n  return out;\n};\n\n/**\n * Rewrite args for special cases such as -XPUT.\n */\n\nfunction rewrite(args: string[]) {\n  return args.reduce((args: string[], a) => {\n    const newArgs = [...args];\n    if (0 === a.indexOf(\"-X\")) {\n      newArgs.push(\"-X\");\n      newArgs.push(a.slice(2));\n    } else {\n      newArgs.push(a);\n    }\n\n    return newArgs;\n  }, []);\n}\n","import prettier from \"prettier/standalone\";\nimport parserGraphql from \"prettier/parser-graphql\";\n\nimport { parser } from \"./parser\";\n\nconst DefaultValue = {\n  query: \"\",\n  header: \"\",\n  variables: \"\",\n};\n\nfunction formatter(inputStr: string) {\n  if (!inputStr) return DefaultValue;\n  let body;\n  let header;\n  let variables;\n  let query;\n  try {\n    const parsed = parser(inputStr);\n    body = parsed.body || \"\";\n    header = parsed.header || {};\n    const jsCodes = JSON.parse(\n      body.replace(/^\\$/, \"\").replace(/\\\\(\\\\)?n/g, \"\")\n    );\n    variables = jsCodes.variables;\n    query = jsCodes.query;\n  } catch {\n    return DefaultValue;\n  }\n\n  return {\n    query: formatStrToGraphql(query),\n    header: formatJsToJson(header),\n    variables: formatJsToJson(variables),\n  };\n}\n\nconst formatJsToJson = (js: Record<string, any>) => {\n  try {\n    return JSON.stringify(js, null, 2);\n  } catch {\n    return \"\";\n  }\n};\n\nconst formatStrToGraphql = (str: string) => {\n  try {\n    return prettier.format(str, {\n      parser: \"graphql\",\n      plugins: [parserGraphql],\n    });\n  } catch {\n    return \"\";\n  }\n};\n\nconst isURL = (s: string) => /^https?:\\/\\//.test(s);\n\nconst parseField = (s: string) => s.split(/: (.+)/);\n\nconst beautyFormatInfo = (formatInput: ReturnType<typeof formatter>) => `\nGraphql Queries:\n${formatInput.query}\n\nGraphql Variables:\n${formatInput.variables}\n\nRequest Headers:\n${formatInput.header}\n`;\n\nexport {\n  formatJsToJson,\n  formatStrToGraphql,\n  isURL,\n  parseField,\n  formatter,\n  beautyFormatInfo,\n};\n","import React, { useState, useMemo } from \"react\";\nimport useClippy from \"use-clippy\";\nimport classNames from \"classnames\";\nimport \"./App.css\";\nimport { formatter, beautyFormatInfo } from \"./formatter\";\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const formatInput = useMemo(() => formatter(input), [input]);\n  const [, setClipbaord] = useClippy();\n  const hasError = useMemo(\n    () =>\n      input &&\n      !formatInput.variables &&\n      !formatInput.query &&\n      !formatInput.header,\n    [input, formatInput]\n  );\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <textarea\n          \n          className={classNames(\"code\", { showError: hasError })}\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n        ></textarea>\n        {[formatInput.query, formatInput.header, formatInput.variables].map(\n          (value) => (\n            <div className=\"show\">\n              <textarea className=\"targetValue\" value={value}></textarea>\n              {value && (\n                <button className=\"copyBtn\" onClick={() => setClipbaord(value)}>\n                  copy\n                </button>\n              )}\n            </div>\n          )\n        )}\n        <div className=\"operations\">\n          <button onClick={() => setClipbaord(beautyFormatInfo(formatInput))}>\n            copy all info\n          </button>\n          <button onClick={() => setInput(\"\")}>clear</button>\n          {hasError && <p>Syntax Error</p>}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}